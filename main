import json
import requests_with_caching


def get_movies_from_tastedive(media):
    # extracts results from tastedive
    # Str -> Dict
    baseurl = "https://tastedive.com/api/similar"
    params_d = {}
    params_d["q"] = media
    params_d["type"] = "movies" 
    params_d["limit"] = "5"
    resp = requests_with_caching.get(baseurl, params_d)
    
    dick = resp.json()
    return dick


def extract_movie_titles(dic):
    # turns results from tastedive API into just lo Names
    # Dict -> listof Str
    return [r["Name"] for r in dic["Similar"]["Results"]]


def get_related_titles(los):
    # takes list of movies and gets the related one for each
    # listof Str -> listof Str
    final = []
    for string in los:
        related = get_movies_from_tastedive(string)
        related_titles = extract_movie_titles(related)
        for item in related_titles:
            if item not in final:
                final.append(item)
    return final


def get_movie_data(title):
    # extracts info about title from OMDB API
    # Str -> Dict
    baseurl = "http://www.omdbapi.com/"
    params_d = {}
    params_d["t"] = title
    params_d["r"] = "json" 
    resp = requests_with_caching.get(baseurl, params_d)
    
    dick = resp.json()
    return dick


def get_movie_rating(OMBD_dict):
    # extracts rating from OMDB API result
    # Dict -> Int

    ratings = OMBD_dict["Ratings"]
    ans = 0
    for rate in ratings:
        if rate["Source"] == "Rotten Tomatoes":
            ans = int(rate["Value"][:-1])
    return ans

def get_sorted_recommendations(los):
    # extracts sorted list of movie title in descending rot tom order
    # listof Str -> listof Str
    rec_titles = get_related_titles(los)

    rec_rating = []
    for title in rec_titles:
        rating = get_movie_rating(get_movie_data(title))
        rec_rating.append(rating)

    recs = list(zip(rec_rating, rec_titles))

    final = sorted(recs, reverse=True)
    return [f[1] for f in final]
